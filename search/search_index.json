{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"User Guide \ue157 Overview \ue157 EasyDiff is a diff tool for comparing files in Sublime Text in special diff tabs and/or in your preferred external diff viewer. Allows comparing views, selections, multi-selections, and clipboard combinations. Can compare the working copy against the base or previous revision of a file in SVN, Git, or Mercurial (requires some setup and configuration). Has Dynamic context menus for selecting left side and right side compare. Dynamic menus show what file is on left side (think Beyond Compare context menus). View diffs in a view buffer or output panel. You can selectively hide version control menus or disable the command completely via the settings file. Can open diffs in external diff programs if desired (requires some setup and configuration). Show only internal diff options, only external options, or show both depending on your needs and preferences. Basic Usage \ue157 EasyDiff is easy to use. When in a view, simply select the Set Left Side option in the context menus to set what is to be compared on the left. Then select what to compare to via Compare with menu option. For version control, just select the applicable option when in a view that is version controlled. General Settings \ue157 By default, EasyDiff shows diffs in a separate view. You can display the diff in an output panel if desired using the following setting: // Use a buffer instead of the output panel \"use_buffer\" : true , EasyDiff allows for diffing with the clipboard, selections, and even multi-selections. These all can be turned off or on as desired: // Enable clipboard commands \"use_clipboard\" : true , // Enable selection commands \"use_selections\" : false , // If enabled, this allows for multiple selections. // Each selection is separated with a new line. \"multi_select\" : false , If you want to compare multiple text blocks against another file or buffer, you can enable multi_select which which combine multiple selections into one buffer that you can compare against another file or buffer. // If enabled, this allows for multiple selections. // Each selection is separated with a new line. \"multi_select\" : false Dynamic Menu \ue157 EasyDiff creates a dynamic menu in User/EasyDiff/Context.sublime-menu , User/EasyDiff/Tab Context.sublime-menu , and User/EasyDiff/Side Bar.sublime-menu . The content of this context menu changes depending on what is enabled or disabled, hidden or shown, and depending on whether a view, selection, or clipboard has been selected for left side compare. If a view that was previously set has been closed, that view will no longer be reported in the context menu. You can look at the commands in the menu to to see how the commands are constructed if you have a need to bind the commands to shortcuts or to the command palette. Configuring the Dynamic Menu \ue157 EasyDiff can show access commands in the view, tab, and sidebar context menu. If it is desired to exclude or include access diff options in one of these UI elements, you can remove or add the element respectively in the following setting: // Menus to show (view|tab|sidebar) \"menu_types\" : [ \"view\" , \"tab\" , \"sidebar\" ], If you would like to reduce EasyDiff's footprint at the top level of your menus, or avoid navigating down an extra menu level, you can add or remove the menu type from the submenu option. Place the menu type in the setting's array to nest the commands under a single menu entry, or remove a menu type to have all options accessible at the top level. // To reduce menu footprint, place diff menus under a parent item \"EasyDiff\" // (view|tab|sidebar) \"submenu\" : [ \"view\" , \"tab\" , \"sidebar\" ], Version Control Setup \ue157 EasyDiff currently supports SVN, Git, and Mercurial. These options should only appear in the context menus if EasyDiff can find the binaries svn , git , and hg respectively. If one of these options shows up, and you wish to disable them, you can go to your settings file and disable them completely with the following settings: // Turn off svn completely \"svn_disabled\" : false , // Turn off git completely \"git_disabled\" : false , // Turn off (Mercurial) hg completely \"hg_disabled\" : false , If you would simply like to hide the options (because you have bound their operations to a shortcut or to the command palette), you can hide the options without disabling them: // Turn off svn menu access \"svn_hide_menu\" : false , // Turn off git menu access \"git_hide_menu\" : false , // Turn off (Mercurial) hg menu access \"hg_hide_menu\" : false , If your binaries are not in your system's path, you will need to configure the following settings with the path to your binaries: // SVN path \"svn\" : \"\" , // Git Path \"git\" : \"\" , // (Mercurial) Hg path \"hg\" : \"\" , By default, EasyDiff will check if the current view is version controlled by one of your enabled version control binaries when displaying the context menu. This allows the for non-pertinent options to be grayed out. With some version control systems, this can occasionally cause a lag when displaying those options. You can turn off this functionality if it becomes a problem with the following settings: // Do not perform a version check on files // when evaluating whether version control // commands are enabled. May avoid slowing // down context menu draw in large version // controlled projects. \"skip_version_check_on_is_enabled\" : false , Using the Quick Panel to Diff \ue157 EasyDiff is setup to use menus to initiate diffs, but this is not always aligned with everyone's workflow. For this reason, EasyDiff can also be configured to use quick panel commands. // Show Diff menu command in the command palette \"quick_panel_commands\" : false , // Enable manual \"set left side\" and \"compare\" commands in the panel \"quick_panel_left_right_commands\" : false , // Show commands in the quickpanel that use the last active // tab as the left side. Selection commands will look at selections // of both the last activated and current. \"last_activated_commands\" : true , To enable quick panel commands, simply enable quick_panel_commands . By default, EasyDiff is configured to allow comparing either the selection, clipboard, or current view against the last activated view. To enable the set left left / right compare options for greater control, enable quick_panel_left_right_commands . And if you want to get rid of the compare against last active view, just disable last_activated_commands . Diffing with External Diff Tools \ue157 EasyDiff is configured to diff everything internally in a single view. But, it can be configured to diff in external tools instead. This is especially useful if you need to see more than just a diff (such as merging content between the diff). Configure the external binary setting to point to the desired diff tool binary, and then enable external diff options: // Show external options (options to send files to external diff tool) \"show_external\" : false , // External diff tool path (absolute) \"external_diff\" : \"\" , The external option assumes the diff tool takes arguments as such: tool file1 file2 . If this is not the case, you will probably have to wrap the command in a shell script that takes the options as described, and call it directly instead. For instance, when I was using DeltaWalker on Mac, I copied their provided work flow configuration to a shell script, and called it directly: #!/bin/sh DW_PATH = /Applications/DeltaWalker.app/Contents/MacOS java -Ddw.path = $DW_PATH -jar $DW_PATH /dw.jar \" $1 \" \" $2 \" \" $3 \" \" $4 \" \" $5 \" \" $6 \" Hiding Internal Diffing from Context Menu \ue157 EasyDiff allows you to not only enable or disable external diffing, but you can hide internal diffing as well. This option is also useful if you do not use the context menu and have bound the commands to keyboard shortcuts or to the command palette. You can disable the option in the menu, but still access it via the command palette. The settings are: // Show internal diff options (EasyDiff in a view or buffer) \"show_internal\" : true , // Show external options (options to send files to external diff tool) \"show_external\" : false , SubNotify \ue157 Occasionally, EasyDiff will about a message in the status bar. You can redirect these messages to your your OS's notification center by using SubNotify. If you have SubNotify installed, just enable the following setting: // Use SubNotify plugin if installed \"use_sub_notify\" : true","title":"User Guide"},{"location":"#user-guide","text":"","title":"User Guide"},{"location":"#overview","text":"EasyDiff is a diff tool for comparing files in Sublime Text in special diff tabs and/or in your preferred external diff viewer. Allows comparing views, selections, multi-selections, and clipboard combinations. Can compare the working copy against the base or previous revision of a file in SVN, Git, or Mercurial (requires some setup and configuration). Has Dynamic context menus for selecting left side and right side compare. Dynamic menus show what file is on left side (think Beyond Compare context menus). View diffs in a view buffer or output panel. You can selectively hide version control menus or disable the command completely via the settings file. Can open diffs in external diff programs if desired (requires some setup and configuration). Show only internal diff options, only external options, or show both depending on your needs and preferences.","title":"Overview"},{"location":"#basic-usage","text":"EasyDiff is easy to use. When in a view, simply select the Set Left Side option in the context menus to set what is to be compared on the left. Then select what to compare to via Compare with menu option. For version control, just select the applicable option when in a view that is version controlled.","title":"Basic Usage"},{"location":"#general-settings","text":"By default, EasyDiff shows diffs in a separate view. You can display the diff in an output panel if desired using the following setting: // Use a buffer instead of the output panel \"use_buffer\" : true , EasyDiff allows for diffing with the clipboard, selections, and even multi-selections. These all can be turned off or on as desired: // Enable clipboard commands \"use_clipboard\" : true , // Enable selection commands \"use_selections\" : false , // If enabled, this allows for multiple selections. // Each selection is separated with a new line. \"multi_select\" : false , If you want to compare multiple text blocks against another file or buffer, you can enable multi_select which which combine multiple selections into one buffer that you can compare against another file or buffer. // If enabled, this allows for multiple selections. // Each selection is separated with a new line. \"multi_select\" : false","title":"General Settings"},{"location":"#dynamic-menu","text":"EasyDiff creates a dynamic menu in User/EasyDiff/Context.sublime-menu , User/EasyDiff/Tab Context.sublime-menu , and User/EasyDiff/Side Bar.sublime-menu . The content of this context menu changes depending on what is enabled or disabled, hidden or shown, and depending on whether a view, selection, or clipboard has been selected for left side compare. If a view that was previously set has been closed, that view will no longer be reported in the context menu. You can look at the commands in the menu to to see how the commands are constructed if you have a need to bind the commands to shortcuts or to the command palette.","title":"Dynamic Menu"},{"location":"#configuring-the-dynamic-menu","text":"EasyDiff can show access commands in the view, tab, and sidebar context menu. If it is desired to exclude or include access diff options in one of these UI elements, you can remove or add the element respectively in the following setting: // Menus to show (view|tab|sidebar) \"menu_types\" : [ \"view\" , \"tab\" , \"sidebar\" ], If you would like to reduce EasyDiff's footprint at the top level of your menus, or avoid navigating down an extra menu level, you can add or remove the menu type from the submenu option. Place the menu type in the setting's array to nest the commands under a single menu entry, or remove a menu type to have all options accessible at the top level. // To reduce menu footprint, place diff menus under a parent item \"EasyDiff\" // (view|tab|sidebar) \"submenu\" : [ \"view\" , \"tab\" , \"sidebar\" ],","title":"Configuring the Dynamic Menu"},{"location":"#version-control-setup","text":"EasyDiff currently supports SVN, Git, and Mercurial. These options should only appear in the context menus if EasyDiff can find the binaries svn , git , and hg respectively. If one of these options shows up, and you wish to disable them, you can go to your settings file and disable them completely with the following settings: // Turn off svn completely \"svn_disabled\" : false , // Turn off git completely \"git_disabled\" : false , // Turn off (Mercurial) hg completely \"hg_disabled\" : false , If you would simply like to hide the options (because you have bound their operations to a shortcut or to the command palette), you can hide the options without disabling them: // Turn off svn menu access \"svn_hide_menu\" : false , // Turn off git menu access \"git_hide_menu\" : false , // Turn off (Mercurial) hg menu access \"hg_hide_menu\" : false , If your binaries are not in your system's path, you will need to configure the following settings with the path to your binaries: // SVN path \"svn\" : \"\" , // Git Path \"git\" : \"\" , // (Mercurial) Hg path \"hg\" : \"\" , By default, EasyDiff will check if the current view is version controlled by one of your enabled version control binaries when displaying the context menu. This allows the for non-pertinent options to be grayed out. With some version control systems, this can occasionally cause a lag when displaying those options. You can turn off this functionality if it becomes a problem with the following settings: // Do not perform a version check on files // when evaluating whether version control // commands are enabled. May avoid slowing // down context menu draw in large version // controlled projects. \"skip_version_check_on_is_enabled\" : false ,","title":"Version Control Setup"},{"location":"#using-the-quick-panel-to-diff","text":"EasyDiff is setup to use menus to initiate diffs, but this is not always aligned with everyone's workflow. For this reason, EasyDiff can also be configured to use quick panel commands. // Show Diff menu command in the command palette \"quick_panel_commands\" : false , // Enable manual \"set left side\" and \"compare\" commands in the panel \"quick_panel_left_right_commands\" : false , // Show commands in the quickpanel that use the last active // tab as the left side. Selection commands will look at selections // of both the last activated and current. \"last_activated_commands\" : true , To enable quick panel commands, simply enable quick_panel_commands . By default, EasyDiff is configured to allow comparing either the selection, clipboard, or current view against the last activated view. To enable the set left left / right compare options for greater control, enable quick_panel_left_right_commands . And if you want to get rid of the compare against last active view, just disable last_activated_commands .","title":"Using the Quick Panel to Diff"},{"location":"#diffing-with-external-diff-tools","text":"EasyDiff is configured to diff everything internally in a single view. But, it can be configured to diff in external tools instead. This is especially useful if you need to see more than just a diff (such as merging content between the diff). Configure the external binary setting to point to the desired diff tool binary, and then enable external diff options: // Show external options (options to send files to external diff tool) \"show_external\" : false , // External diff tool path (absolute) \"external_diff\" : \"\" , The external option assumes the diff tool takes arguments as such: tool file1 file2 . If this is not the case, you will probably have to wrap the command in a shell script that takes the options as described, and call it directly instead. For instance, when I was using DeltaWalker on Mac, I copied their provided work flow configuration to a shell script, and called it directly: #!/bin/sh DW_PATH = /Applications/DeltaWalker.app/Contents/MacOS java -Ddw.path = $DW_PATH -jar $DW_PATH /dw.jar \" $1 \" \" $2 \" \" $3 \" \" $4 \" \" $5 \" \" $6 \"","title":"Diffing with External Diff Tools"},{"location":"#hiding-internal-diffing-from-context-menu","text":"EasyDiff allows you to not only enable or disable external diffing, but you can hide internal diffing as well. This option is also useful if you do not use the context menu and have bound the commands to keyboard shortcuts or to the command palette. You can disable the option in the menu, but still access it via the command palette. The settings are: // Show internal diff options (EasyDiff in a view or buffer) \"show_internal\" : true , // Show external options (options to send files to external diff tool) \"show_external\" : false ,","title":"Hiding Internal Diffing from Context Menu"},{"location":"#subnotify","text":"Occasionally, EasyDiff will about a message in the status bar. You can redirect these messages to your your OS's notification center by using SubNotify. If you have SubNotify installed, just enable the following setting: // Use SubNotify plugin if installed \"use_sub_notify\" : true","title":"SubNotify"},{"location":"contributing/","text":"Contributing & Support \ue157 Overview \ue157 Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports \ue157 Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->EasyDiff->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code \ue157 Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests \ue157 Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests \ue157 Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements \ue157 A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->EasyDiff->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"contributing/#running-validation-tests","text":"Tip If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"installation/","text":"Installation \ue157 Package Control \ue157 The recommended way to install EasyDiff is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing EasyDiff ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation \ue157 Warning This is not the recommended way to install EasyDiff for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone EasyDiff and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install EasyDiff without package control, here are the steps. It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack, or git clone, the latest EasyDiff release and unpack as EasyDiff : facelessuser/EasyDiff -> EasyDiff Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning \ue157 Quit Sublime Text. Open a terminal and enter the following. For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/EasyDiff.git EasyDiff Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install EasyDiff is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (macOS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing EasyDiff ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install EasyDiff for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone EasyDiff and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install EasyDiff without package control, here are the steps. It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack, or git clone, the latest EasyDiff release and unpack as EasyDiff : facelessuser/EasyDiff -> EasyDiff Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/EasyDiff.git EasyDiff Restart Sublime Text.","title":"Git Cloning"},{"location":"license/","text":"License \ue157 EasyDiff is released under the MIT license. Copyright \u00a9 2013 - 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"EasyDiff is released under the MIT license. Copyright \u00a9 2013 - 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}